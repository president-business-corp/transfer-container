name: GitHub Packages Docker ➡️ GHCR

on:
  workflow_dispatch:

# TODO: Add the a read:packages, write:packages scoped PAT for GHCR to the repo secrets as CR_PAT
env:
  NEW_REGISTRY_USER: ${{ github.actor }}
  NEW_REGISTRY_AUTH: ${{ secrets.CR_PAT }}
  NEW_REGISTRY: ghcr.io
  OLD_REGISTRY: docker.pkg.github.com
  OLD_REGISTRY_USER: ${{ github.actor }}
  OLD_REGISTRY_AUTH: ${{ github.token }}

jobs:

  transfer:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@v3
        id: v1s
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const query = `query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name){
                packages(first: 100, packageType:DOCKER) {
                  nodes {
                    name
                    versions(first: 100) {
                      nodes {
                        version
                      }
                    }
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo
            }
            const result = await github.graphql(query, variables)
            if (!result) {
              core.setFailed('GraphQL request failed')
            } else {
              return result;
            }

      - name: Echo all Packages
        run: echo "${{steps.v1s.outputs.result}}"

      - uses: actions/github-script@v3
        id: all
        with:
          script: |
            const packages = JSON.parse('${{steps.v1s.outputs.result}}');
            console.log(packages);
            const nodes = packages.repository.packages.nodes;
            const result = nodes.map(container => container.versions.nodes.filter(v => v.version != 'docker-base-layer').map(v => `${container.name}:${v.version}`));
            return result.flat().join(' ');

      - uses: docker/login-action@v1
        with:
          username: ${{ env.OLD_REGISTRY_USER }}
          password: ${{ env.OLD_REGISTRY_AUTH }}
          registry: ${{ env.OLD_REGISTRY }}

      - uses: docker/login-action@v1
        with:
          username: ${{ env.NEW_REGISTRY_USER }}
          password: ${{ env.NEW_REGISTRY_AUTH }}
          registry: ${{ env.NEW_REGISTRY }}

      - run: |
          for IMAGE in ${{fromJSON(steps.all.outputs.result)}}
          do
            docker pull ${OLD_REGISTRY}/${{ github.repository }}/$IMAGE
          done

      - run: |
          for IMAGE in ${{fromJSON(steps.all.outputs.result)}}
          do
            docker tag ${OLD_REGISTRY}/${{ github.repository }}/$IMAGE \
                       ${NEW_REGISTRY}/${{ github.repository }}/$IMAGE
          done

      - run: |
          for IMAGE in ${{fromJSON(steps.all.outputs.result)}}
          do
            docker push ${NEW_REGISTRY}/${{ github.repository }}/$IMAGE
          done
